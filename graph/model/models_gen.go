// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Link struct {
	ID      string `json:"id"`
	Title   string `json:"title"`
	Address string `json:"address"`
	User    *User  `json:"user"`
	Score   int32  `json:"score"`
}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Mutation struct {
}

type NewLink struct {
	Title   string `json:"title"`
	Address string `json:"address"`
}

type NewUser struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Query struct {
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type Subscription struct {
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type VoteInput struct {
	LinkID string    `json:"linkId"`
	Vote   *VoteType `json:"vote,omitempty"`
}

type VoteType string

const (
	VoteTypeUp   VoteType = "UP"
	VoteTypeDown VoteType = "DOWN"
)

var AllVoteType = []VoteType{
	VoteTypeUp,
	VoteTypeDown,
}

func (e VoteType) IsValid() bool {
	switch e {
	case VoteTypeUp, VoteTypeDown:
		return true
	}
	return false
}

func (e VoteType) String() string {
	return string(e)
}

func (e *VoteType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VoteType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VoteType", str)
	}
	return nil
}

func (e VoteType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
